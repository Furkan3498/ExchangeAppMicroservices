spring.application.name=currency-exchange-service
server.port=8000
spring.config.import=optional:configserver:http://localhost:8888


spring.jpa.show-sql=true
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.username=sa
spring.datasource.password=as

spring.h2.console.enabled=true

spring.jpa.defer-datasource-initialization=true


eureka.client.service-url.default-zone=${EUREKA_URI:http://localhost:8761/eureka}
# 5 defa bu metoda istek atiyor
resilience4j.retry.instances.sample-api.max-attempts=5
# her bekleme süresini 1 saniye yap?yor
resilience4j.retry.instances.sample-api.wait-duration=1s
# katlanarak bekleme süresini art?r?yor
resilience4j.retry.instances.sample-api.enable-exponential-backoff=true
resilience4j.ratelimiter.instances.default.limit-for-period=2
resilience4j.ratelimiter.instances.default.limit-refresh-period=10s
resilience4j.bulkhead.instances.default.maxConcurrentCalls=10


#Zaman a??m? tan?mlar: Belirli bir sürede tamamlanmayan i?lemleri durdurur.
#Kaynaksal t?kan?kl??? önler: Uzun süren i?lemlerin sistemi bloke etmesini engeller.
#Servis kalitesini art?r?r: Kullan?c?ya daha h?zl? hata geri dönü?ü sa?lar, ba?ka çözümlerle devam etme imkân? verir (örne?in fallback).
#.timelimiter.instances.